import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.50.5';

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface AIRequest {
  type: 'rental_agreement' | 'late_notice' | 'checklist' | 'legal_qa';
  data?: {
    landlordName?: string;
    tenantName?: string;
    propertyAddress?: string;
    monthlyRent?: number;
    leaseStartDate?: string;
    leaseEndDate?: string;
    question?: string;
  };
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Verify authentication
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    const token = authHeader.replace('Bearer ', '');
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    if (authError || !user) {
      throw new Error('Invalid token');
    }

    const { type, data }: AIRequest = await req.json();

    let prompt = '';
    let systemMessage = 'You are a legal assistant specializing in rental property law. Provide helpful, accurate information but always remind users to consult with a qualified attorney for legal advice.';

    switch (type) {
      case 'rental_agreement':
        systemMessage = 'You are a legal document generator. Create a professional rental agreement template. Include standard clauses but remind users to have it reviewed by a lawyer.';
        prompt = `Generate a rental agreement template with the following details:
        - Landlord: ${data?.landlordName || '[LANDLORD NAME]'}
        - Tenant: ${data?.tenantName || '[TENANT NAME]'}
        - Property: ${data?.propertyAddress || '[PROPERTY ADDRESS]'}
        - Monthly Rent: $${data?.monthlyRent || '[MONTHLY RENT]'}
        - Lease Start: ${data?.leaseStartDate || '[START DATE]'}
        - Lease End: ${data?.leaseEndDate || '[END DATE]'}
        
        Include standard rental agreement clauses covering rent payment, security deposit, maintenance responsibilities, and termination conditions.`;
        break;

      case 'late_notice':
        systemMessage = 'You are a document generator for rental property management. Create professional but firm late payment notices.';
        prompt = `Generate a late payment notice for:
        - Tenant: ${data?.tenantName || '[TENANT NAME]'}
        - Property: ${data?.propertyAddress || '[PROPERTY ADDRESS]'}
        - Monthly Rent: $${data?.monthlyRent || '[MONTHLY RENT]'}
        
        Include grace period information, late fees, and next steps if payment isn't received.`;
        break;

      case 'checklist':
        prompt = 'Generate a comprehensive move-in/move-out property inspection checklist for rental properties. Include all rooms and common areas, with space for notes and signatures.';
        break;

      case 'legal_qa':
        prompt = data?.question || 'What are the basic rights and responsibilities of landlords and tenants?';
        break;

      default:
        throw new Error('Invalid request type');
    }

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14',
        messages: [
          { role: 'system', content: systemMessage },
          { role: 'user', content: prompt }
        ],
        max_tokens: 2000,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }

    const aiResponse = await response.json();
    const generatedContent = aiResponse.choices[0].message.content;

    return new Response(JSON.stringify({ 
      content: generatedContent,
      type,
      disclaimer: 'This content is generated by AI and should not be considered as legal advice. Please consult with a qualified attorney for legal matters.'
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in ai-legal-assistant function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});